import { debug as debugInit } from "debug";
import SpotifyWebApi from "spotify-web-api-node";
import { applyFilters, applySort } from "../types/fields";
import { CleanLibrary } from "./interfaces";
import { spotifyLimiter } from "./scrape/spotify";
import {
  addTracksToPlaylist,
  getUserPlaylists,
} from "./scrape/spotify-playlist";
import { playlistToSync as playlistsToSync } from "./sync-playlist-json";

const debug = debugInit("music-scraper:spotify-sync-playlist");

export async function syncPlaylists(cleanLibrary: CleanLibrary) {
  if (process.env.SPOTIFY_TOKEN) {
    const spotifyApi = new SpotifyWebApi();
    spotifyApi.setAccessToken(process.env.SPOTIFY_TOKEN);

    debug(`connected to spotify`);

    const testMode = false;

    const usersPlaylists = !testMode ? await getUserPlaylists(spotifyApi) : [];

    for (let i = 0; i < playlistsToSync.length; i++) {
      const playlistToSync = playlistsToSync[i];
      const existingPlaylist = usersPlaylists.find(
        (p) => p.name === playlistToSync.name
      );

      let albums = Object.values(cleanLibrary.albums);

      if (playlistToSync.filters) {
        albums = applyFilters(albums, playlistToSync.filters);
      }

      if (playlistToSync.sort) {
        albums = applySort(albums, playlistToSync.sort);
      }

      if (playlistToSync.limit) {
        albums = albums.slice(0, playlistToSync.limit);
      }

      if (testMode) {
        console.log(playlistToSync.name);
        console.log(
          albums.map(
            (a) =>
              `${a.title} ${
                playlistToSync.sort
                  ? `- SORTBY ${playlistToSync.sort[0]} = ${
                      a[playlistToSync.sort[0]]
                    }`
                  : ``
              }`
          )
        );
      }

      if (existingPlaylist && !playlistToSync.forceRecreate) {
        // Fetch and update
        console.log("TO update playlist");
      } else {
        // Create

        debug(`creating new playlist with name ${playlistToSync.name}`);
        const newPlaylist = !testMode
          ? (
              await spotifyLimiter.schedule(() =>
                spotifyApi.createPlaylist(playlistToSync.name, {
                  description: `Generated by Nick's media-scraper. Last updated: ${new Date().toString()}`,
                })
              )
            ).body
          : undefined;

        debug(
          `successfully creating new playlist with name ${playlistToSync.name} - id = ${newPlaylist?.id}\nadding ${albums.length} albums to playlist`
        );

        if (!testMode && newPlaylist)
          await addTracksToPlaylist(
            spotifyApi,
            newPlaylist.id,
            albums.reduce<string[]>(
              (tracks, album) => [...tracks, ...album.tracks],
              []
            )
          );
      }
    }
  } else {
    debug(`WARNING no SPOTIFY_TOKEN provided`);
  }
}

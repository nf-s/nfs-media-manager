import { debug as debugInit } from "debug";
import SpotifyWebApi from "spotify-web-api-node";
import {
  applyFilter,
  FilterValue,
  SortValue,
  isTextFilter,
  isNumericFilter,
} from "../types/fields";
import { CleanAlbum, CleanLibrary } from "./interfaces";
import { spotifyLimiter } from "./scrape/spotify";
import {
  addTracksToPlaylist,
  getUserPlaylists,
} from "./scrape/spotify-playlist";

const debug = debugInit("music-scraper:spotify-sync-playlist");

interface SyncPlaylist {
  name: string;
  filters?: FilterValue<CleanAlbum>[];
  sort?: SortValue<CleanAlbum>;
  forceRecreate?: boolean;
  limit?: number;
}

export async function syncPlaylists(cleanLibrary: CleanLibrary) {
  if (process.env.SPOTIFY_TOKEN) {
    const spotifyApi = new SpotifyWebApi();
    spotifyApi.setAccessToken(process.env.SPOTIFY_TOKEN);

    debug(`connected to spotify`);

    const usersPlaylists = await getUserPlaylists(spotifyApi);

    const testPlaylist: SyncPlaylist[] = [
      // {
      //   name: "All albums",
      //   sort: { key: "dateAdded", desc: true },
      // },
      {
        name: "Ambient albums",
        filters: [{ field: "genres", value: "ambient" }],
        sort: ["dateAdded", "DESC"],
      },
      {
        name: "Funk / soul albums",
        filters: [{ field: "genres", value: "funk / soul" }],
        sort: ["dateAdded", "DESC"],
      },
      {
        name: "Alt rock albums (sorted by RYM)",
        filters: [{ field: "genres", value: "alternative rock" }],
        sort: ["ratingRymValue", "DESC"],
      },
      {
        name: "Jazz albums (sorted by scrobbles)",
        sort: ["scrobbles", "ASC"],
        filters: [
          {
            value: "cool jazz",
            field: "genres",
          },
          {
            value: "hard bop",
            field: "genres",
          },
          {
            value: "avant-garde jazz",
            field: "genres",
          },
          {
            value: "spiritual jazz",
            field: "genres",
          },
          {
            value: "modal",
            field: "genres",
          },
          {
            value: "bebop",
            field: "genres",
          },
          {
            value: "afro-jazz",
            field: "genres",
          },
          {
            value: "progressive jazz",
            field: "genres",
          },
        ],
      },
    ];

    for (let i = 0; i < testPlaylist.length; i++) {
      const playlistToSync = testPlaylist[i];
      const existingPlaylist = usersPlaylists.find(
        (p) => p.name === playlistToSync.name
      );

      let albums = Object.values(cleanLibrary.albums);

      if (playlistToSync.filters) {
        albums = albums.filter(
          (album) =>
            // Union all text filters
            playlistToSync
              .filters!.filter(isTextFilter)
              .reduce<boolean>((include, filter) => {
                return include || applyFilter(album, filter);
              }, false) &&
            // Intersect all numeric filters

            playlistToSync
              .filters!.filter(isNumericFilter)
              .reduce<boolean>((include, filter) => {
                return include && applyFilter(album, filter);
              }, true)
        );
      }

      if (playlistToSync.sort) {
        albums = albums.sort((a, b) => {
          const aValue = a[playlistToSync.sort![0]];
          const bValue = b[playlistToSync.sort![0]];

          if (typeof aValue === "string" && typeof bValue === "string")
            return (aValue ?? "").localeCompare(bValue ?? "");
          if (typeof aValue === "number" && typeof bValue === "number")
            return aValue - bValue;
          return 0;
        });

        if (playlistToSync.sort?.[1] === "DESC") {
          albums.reverse();
        }
      }

      if (existingPlaylist && !playlistToSync.forceRecreate) {
        // Fetch and update
        console.log("TO update playlist");
      } else {
        // Create

        debug(`creating new playlist with name ${playlistToSync.name}`);
        const newPlaylist = (
          await spotifyLimiter.schedule(() =>
            spotifyApi.createPlaylist(playlistToSync.name, {
              description: `Generated by Nick's media-scraper. Last updated: ${new Date().toString()}`,
            })
          )
        ).body;
        debug(
          `successfully creating new playlist with name ${playlistToSync.name} - id = ${newPlaylist.id}\nadding ${albums.length} albums to playlist`
        );

        await addTracksToPlaylist(
          spotifyApi,
          newPlaylist.id,
          albums.reduce<string[]>(
            (tracks, album) => [...tracks, ...album.tracks],
            []
          )
        );
      }
    }
  } else {
    debug(`WARNING no SPOTIFY_TOKEN provided`);
  }
}

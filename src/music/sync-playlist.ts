import debugPkg from "debug";
import SpotifyWebApi from "spotify-web-api-node";
import { applyFilters, applySort } from "../types/fields.js";
import { CleanLibrary } from "./clean/interfaces.js";
import { spotifyLimiter } from "./scrape/spotify.js";
import {
  addTracksToPlaylist,
  getUserPlaylists,
  playlistHasTracks,
  removeAllTracksFromPlaylist,
} from "./scrape/spotify-playlist.js";
import { playlistToSync as playlistsToSync } from "./sync-playlist-json.js";

const debug = debugPkg.debug("music-scraper:spotify-sync-playlist");

export async function syncPlaylists(
  spotifyApi: SpotifyWebApi,
  cleanLibrary: CleanLibrary
) {
  const testMode = false;

  const usersPlaylists = !testMode ? await getUserPlaylists(spotifyApi) : [];

  for (let i = 0; i < playlistsToSync.length; i++) {
    const playlistToSync = playlistsToSync[i];
    let spotifyPlaylist = usersPlaylists.find(
      (p) => p.name === playlistToSync.name
    );

    let albums = Object.values(cleanLibrary.albums);

    if (playlistToSync.filters) {
      albums = applyFilters(albums, playlistToSync.filters);
    }

    if (playlistToSync.sort) {
      albums = applySort(albums, playlistToSync.sort);
    }

    if (playlistToSync.limit) {
      albums = albums.slice(0, playlistToSync.limit);
    }

    if (testMode) {
      console.log(playlistToSync.name);
      console.log(
        albums.map(
          (a) =>
            `${a.title} ${
              playlistToSync.sort
                ? `- SORTBY ${playlistToSync.sort[0]} = ${
                    a[playlistToSync.sort[0]]
                  }`
                : ``
            }`
        )
      );
      continue;
    }

    const tracksToAdd = albums.reduce<string[]>(
      (tracks, album) => [...tracks, ...album.tracks],
      []
    );

    if (spotifyPlaylist && !playlistToSync.forceRecreate) {
      // Check to see if the playlist has changed

      if (spotifyPlaylist.tracks.total === tracksToAdd.length) {
        // If lazyUpdate is true (or undefined - as we treat default as true),
        // Then we only check if the number of tracks has changed
        if (
          typeof playlistToSync.lazyUpdate === "undefined" ||
          playlistToSync.lazyUpdate
        ) {
          debug(
            `playlist has not changed (lazy search), skipping ${playlistToSync.name}`
          );
          continue;
        }
        // Otherwise, we do exhaustive check to see if the tracks have changed
        if (
          await playlistHasTracks(spotifyApi, spotifyPlaylist.id, tracksToAdd)
        ) {
          debug(
            `playlist has not changed (exhaustive search), skipping ${playlistToSync.name}`
          );
          continue;
        }
      }

      debug(`playlist HAS changed, removing all tracks ${playlistToSync.name}`);

      // Currently, we delete the entire playlist and recreate it :(
      // At some point we should add logic to only add/remove the tracks that have changed
      await removeAllTracksFromPlaylist(
        spotifyApi,
        spotifyPlaylist.id,
        spotifyPlaylist.snapshot_id,
        spotifyPlaylist.tracks.total
      );
    } else {
      // Create new playlist
      debug(`creating new playlist with name ${playlistToSync.name}`);
      spotifyPlaylist = (
        await spotifyLimiter.schedule(() =>
          spotifyApi.createPlaylist(playlistToSync.name, {
            description: `Generated by Nick's media-scraper. Last updated: ${new Date().toString()}`,
          })
        )
      ).body;
    }

    debug(
      `successfully creating new playlist with name ${playlistToSync.name} - id = ${spotifyPlaylist?.id}\nadding ${albums.length} albums to playlist`
    );

    if (spotifyPlaylist)
      await addTracksToPlaylist(
        spotifyApi,
        spotifyPlaylist.id,
        albums.reduce<string[]>(
          (tracks, album) => [...tracks, ...album.tracks],
          []
        )
      );
  }
}
